{"name":"The Sherman Keyboard","tagline":"Synth Loaf","body":"# The-Sherman-Keyboard\r\n\r\n<img src=https://github.com/oplS15projects/The-Sherman-Keyboard/blob/master/screenshot.png>\r\n\r\n##Authors\r\n**Stuart Tomkins**\r\n\r\n**Kevin Waco**\r\n\r\n**Eamon Lightning**\r\n\r\n\r\n##Overview\r\nThe emulation of instruments via audio signal processing is a challenging task and racket provides the tools for\r\ngenerating and manipulating simple sine waves through several different libraries. These libraries can be used to\r\ncreate more complex sounds that emulate the characteristics of real life instruments. The Sherman Keyboard will be a\r\nsynthesizer that will give the user the ability to program their own complex sounds by adjusting different settings\r\nbuilt into the UI as well as the ability to use interesting pre-configured settings that sound similar to real\r\ninstruments.\r\n\r\n##Concepts Demonstrated\r\n* **Object Oriented Programming** is used in creating different elements of the GUI.\r\n* **Data Abstraction** is used to create and play complex sound waves.\r\n* **Recursion** is used to create tones.\r\n\r\n##External Technology and Libraries\r\nBriefly describe the existing technology you utilized, and how you used it. Provide a link to that technology(ies).\r\n\r\n[portaudio](http://pkg-build.racket-lang.org/doc/portaudio/index.html)\r\n\r\n[ffi/vector](http://docs.racket-lang.org/foreign/homogeneous-vectors.html)\r\n\r\n[racket/gui](http://docs.racket-lang.org/gui/index.html?q=racket%20gui)\r\n\r\n\r\n##Favorite Lines of Code\r\n\r\n####Stu:\r\nThese lines of code are the event handling when the user left clicks a key. When the determine-note-on-click\r\nprocedure is called, it determines what key is pressed on the synth based on the pixel position of the mouse.\r\n```\r\n    (define/override (on-event event)\r\n      (when (send event button-down? 'left)\r\n        (determine-note-on-click event)))\r\n```\r\n\r\n####Kevin:\r\n\r\n```\r\n  (define (create-note-hash)\r\n    (define note-hash (make-hash))\r\n  \r\n    (define (init freqs timbre attack max-volume num-of-harmonics)\r\n      (if (null? freqs)\r\n        note-hash\r\n        (begin (hash-set! note-hash (car freqs) (create-tone (car freqs)\r\n                                                             timbre\r\n                                                             attack\r\n                                                             max-volume\r\n                                                             num-of-harmonics))\r\n               (init (cdr freqs) timbre attack max-volume num-of-harmonics))))\r\n        \r\n    (lambda (cmd)\r\n      (cond ((eq? cmd 'init) init)\r\n            ((eq? cmd 'play) (lambda (pitch) (hash-ref note-hash pitch))))))\r\n```\r\n\r\n####Eamon:\r\n\r\n```\r\n\r\n  (define sample1 (real->s16 (* a1 a (sin (+ (* tpisr t (* fundamentalFreq k1)) phase1)))))\r\n  (define sample2 (real->s16 (* a2 a (sin (+ (* tpisr t (* fundamentalFreq k2)) phase2)))))\r\n  (define sample3 (real->s16 (* a3 a (sin (+ (* tpisr t (* fundamentalFreq k3)) phase3)))))\r\n  (define sample4 (real->s16 (* a4 a (sin (+ (* tpisr t (* fundamentalFreq k4)) phase4)))))\r\n  (s16vector-set! vec (* 4 t) sample1)\r\n  (s16vector-set! vec (+ 1 (* 4 t)) sample2)\r\n  (s16vector-set! vec (+ 2 (* 4 t)) sample3)\r\n  (s16vector-set! vec (+ 3 (* 4 t)) sample4))\r\n     \r\n```\r\n\r\n\r\n#How to Download and Run\r\nYou can click the link to the left to download the zipped folder containing our source code. To run the synthesizer, \r\nopen the keyboard.rkt file in Dr. Racket, and run it.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}
{"name":"The Sherman Keyboard","tagline":"Synth Loaf","body":"# The-Sherman-Keyboard\r\n\r\n### Website : [The Sherman Keyboard](http://opls15projects.github.io/The-Sherman-Keyboard/)\r\n\r\n<img src=https://raw.githubusercontent.com/oplS15projects/The-Sherman-Keyboard/master/screenshot.png>\r\n\r\n##Authors\r\n**Stuart Tomkins**\r\n\r\n**Kevin Wacome**\r\n\r\n**Eamon Lightning**\r\n\r\n##Overview\r\nThe emulation of instruments via audio signal processing is a challenging task and racket provides the tools for\r\ngenerating and manipulating simple sine waves through several different libraries. The Sherman Keyboard is a synthesizer that gives the user the ability to program their own complex sounds by adjusting different settings built into the UI as well use pre-configured settings.\r\n\r\n##Concepts Demonstrated\r\n **Object Oriented Programming**: Inheritance is used in creating the different elements of the GUI.\r\n \r\n **Data Abstraction**: Abstractions away from the core synth driver (additive-synth.rkt) by the effects processor allows for easy to generate complex sound waves through the GUI.\r\n \r\n **Data mutability** and **local state**: Used to store musical notes within hash tables in local frames to keep them persistent in memory.\r\n\r\n##External Technology and Libraries\r\n\r\n[portaudio](http://pkg-build.racket-lang.org/doc/portaudio/index.html): Used to play stored audio data via the **s16vec-play** procedure. \r\n\r\n[ffi/vector](http://docs.racket-lang.org/foreign/homogeneous-vectors.html): Used to create sound samples by storing audio data into 16 bit integer arrays. **make-s16vector** is used to create the arrays and various provided procedures are used to fill and access their contents.\r\n\r\n[racket/gui](http://docs.racket-lang.org/gui/index.html?q=racket%20gui): Used to create the various elements of the GUI.\r\n\r\n##Favorite Lines of Code\r\n\r\n####Stu:\r\nThese lines of code are the event handling when the user left clicks a key. When the determine-note-on-click\r\nprocedure is called, it determines what key is pressed on the synth based on the pixel position of the mouse.\r\n```\r\n    (define/override (on-event event)\r\n      (when (send event button-down? 'left)\r\n        (determine-note-on-click event)))\r\n```\r\n\r\n####Kevin:\r\nThis procedure uses the concepts of **assignment** and **local state** to initialize a hash table with musical tones. The procedure *create-note-hash* creates a computational object with time-varying state. When *create-note-hash* is execute a hash object, provided by racket, is created within a local frame within the global environment. The procedure init is defined and then a lambda procedure is returned. The lambda procedure has access to the the procedure *init* and also access to the hash table that was generated. The procedure *init* uses **tail recursion** to fill a hash table by using a list various musical tones. The user can then send **symbolic data** to execute specific operations on the note-hash created. This allows for **abstraction** away from how the notes in hash are created and played.\r\n\r\n```\r\n(define (create-note-hash)\r\n  (define note-hash (make-hash))\r\n    (define (init freqs timbre attack max-volume num-of-harmonics decay-factor)\r\n      (if (null? freqs)\r\n        note-hash\r\n        (begin\r\n          (hash-set! note-hash (car freqs) (create-tone (car freqs)\r\n                                                        timbre\r\n                                                        attack\r\n                                                        max-volume\r\n                                                        num-of-harmonics\r\n                                                        decay-factor))\r\n          (init (cdr freqs) timbre\r\n                            attack\r\n                            max-volume\r\n                            num-of-harmonics\r\n                            decay-factor))))\r\n\r\n  (lambda (cmd)\r\n    (cond ((eq? cmd 'init) init)\r\n          ((eq? cmd 'play) (lambda (pitch) (hash-ref note-hash pitch))))))\r\n```\r\n\r\n####Eamon:\r\n\r\nThis little snippet of code is the heart of the audio generation process. Individual sine waves with different frequencies, amplitudes, and phase offsets are generated and added to an audio vector. When the audio vector is played, these individual sine waves are played simultaneously creating the effect of additive synthesis. \r\n\r\n```\r\n\r\n  (define sample1 (real->s16 (* a1 a (sin (+ (* tpisr t (* fundamentalFreq k1)) phase1)))))\r\n  (define sample2 (real->s16 (* a2 a (sin (+ (* tpisr t (* fundamentalFreq k2)) phase2)))))\r\n  (define sample3 (real->s16 (* a3 a (sin (+ (* tpisr t (* fundamentalFreq k3)) phase3)))))\r\n  (define sample4 (real->s16 (* a4 a (sin (+ (* tpisr t (* fundamentalFreq k4)) phase4)))))\r\n  (s16vector-set! vec (* 4 t) sample1)\r\n  (s16vector-set! vec (+ 1 (* 4 t)) sample2)\r\n  (s16vector-set! vec (+ 2 (* 4 t)) sample3)\r\n  (s16vector-set! vec (+ 3 (* 4 t)) sample4))\r\n     \r\n```\r\n\r\n#How to Run\r\n\r\nInstall [Racket](http://racket-lang.org/)\r\n\r\nDownload .zip or .tar.gz file for this project from [here](http://opls15projects.github.io/The-Sherman-Keyboard/).\r\n\r\n####If .zip was downloaded:\r\n```\r\nunzip <file-name>.zip\r\n```\r\n\r\n####If .tar.gz was downloaded:\r\n```\r\ntar -xvzf <file-name>.tar.gz\r\n```\r\n\r\n####Enter the newly unpacked directory:\r\n```\r\ncd <unpacked directory>\r\n```\r\n\r\n####Load main.rkt with drracket:\r\n```\r\ndrracket main.rkt \r\n```\r\n\r\nOnce drracket has loaded, select run and the interactive GUI should load. drracket should install any dependencies needed by the project.\r\n\r\n#How To Play!\r\n\r\nTo play tones either click on the keys or press the corresponding key binding on your keyboard. You can even press keys simultaneously to play chords.\r\n\r\nThe Sherman Keyboard offers the user the ability to adjust several settings.\r\n\r\n#####sliders:\r\n    volume: How loud the tone played is. The higher the setting the louder.\r\n  \r\n    attack: How rapidly the tone reaches max volume. High attack will sound more like an organ.\r\n     \r\n    decay: How quickly the note is cutoff. The higher the decay the longer the note persists.\r\n\r\n#####presets:\r\n  \r\n    Select from a list of preset tone options. The custom preset allows users to create their own tones using the k2 through k4 and a2 through a4 input fields. \r\n    \r\n#####harmonic settings:\r\n  \r\n    When custom is selected in the preset box, the user can enter their own custom tones.\r\n    \r\n    The input fields k2 through k4 allow the user to set the frequency of the harmonics relative to the fundamental tone.\r\n    \r\n    The input fields a2 through a4 allow the user to adjust how loud the harmonics are.\r\n    \r\n#Evaluation of Results\r\n\r\n\"By the end of this project we will have a working synthesizer that produces complex sounds using sine waves. We will implement a number of features available for the user to interact with that will alter the sounds produced by the synthesizer.\"\r\n\r\nWe were able to implement several different options that the user can adjust to create interesting complex sine waves. The interface, based on feedback from the demonstration, seemed fairly intuitive to newcomers. We did not get to implement all of things we had hoped to such as additional sound effects and dynamic envelopes.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}